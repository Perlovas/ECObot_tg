import matplotlib.pyplot as plt
import numpy as np
import telebot
from telebot import types
from telebot.types import ReplyKeyboardRemove
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

bot = telebot.TeleBot("BOTS_TOKEN")


@bot.message_handler(commands=["start", "help"])
def handle_start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None
    """
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—áü§ì."\
        " –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–∞–º‚Äº‚ùóÔ∏è",
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    button1 = types.KeyboardButton("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–π –ö–ü–í")
    button2 = types.KeyboardButton("–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è")
    button3 = types.KeyboardButton("–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞")
    button4 = types.KeyboardButton("–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã")

    keyboard.add(button1, button2, button3, button4)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", 
        reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
@bot.message_handler(content_types=["sticker",
                                    "location",
                                    "contact",
                                    "document",
                                    "video",
                                    "audio"])
def handle_other_types(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤.

    –í –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ñ–∞–π–ª—ã
    —Ç–∏–ø–∞ 'sticker', 'location', 'contact',
    'document', 'video' –∏ 'audio'. –û–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ
     —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.

    Args: message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None
    """

    bot.reply_to(
        message,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")


@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None
    """
    try:
        photo = open("f.jpg", "rb")
        bot.send_photo(message.chat.id, photo)
        photo.close()
    except Exception as e:
        bot.send_message(
            message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:"\
            " {e}"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è"
@bot.message_handler(
    func=lambda message: message.text == "–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ"\
    " —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è",
    content_types=["text"],
)
def handle_market_equilibrium_start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è".

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None
    """
    remove_keyboard = types.ReplyKeyboardRemove()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_keyboard = types.ReplyKeyboardMarkup(
        row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
    back_keyboard.add(back_button)

    bot.send_message(
        message.chat.id,
        "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö "\
        "—Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: Qd = A*P - B. Qs =C - D*P.",
        reply_markup=back_keyboard)
    bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A:")
    bot.register_next_step_handler(
        message, get_coefficient_A_market_equilibrium)


def get_coefficient_A_market_equilibrium(message):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ A –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return

            A = float(message.text)

            if A < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                )
                bot.register_next_step_handler(
                    message, get_coefficient_A_market_equilibrium
                )
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B:")
            bot.register_next_step_handler(
                message, get_coefficient_B_market_equilibrium, A
            )
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message, get_coefficient_A_market_equilibrium
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message, get_coefficient_A_market_equilibrium)


def get_coefficient_B_market_equilibrium(message, A):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ B –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - A (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A.

    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return

            B = float(message.text)

            if B < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                )
                bot.register_next_step_handler(
                    message, get_coefficient_B_market_equilibrium, 
                    A
                    )
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C:")
            bot.register_next_step_handler(
                message,
                get_coefficient_C_market_equilibrium,
                A,
                B,
            )
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message, get_coefficient_B_market_equilibrium, A
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message, get_coefficient_B_market_equilibrium, A
        )


def get_coefficient_C_market_equilibrium(
        message, A, B):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ C –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - A (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A.
    - B (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B.

    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return

            C = float(message.text)

            if C < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                )
                bot.register_next_step_handler(
                    message,
                    get_coefficient_C_market_equilibrium,
                    A,
                    B,
                )
                return
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç D:")
            bot.register_next_step_handler(
                message,
                get_coefficient_D_market_equilibrium,
                A,
                B,
                C,
            )
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message,
                get_coefficient_C_market_equilibrium,
                A,
                B,
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            get_coefficient_C_market_equilibrium,
            A,
            B)


def calculate_market_equilibrium(A, B, C, D):
    """
    –†–∞—Å—á–µ—Ç —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–π —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º–∞ –Ω–∞ —Ä—ã–Ω–∫–µ.

    Args:
    - A (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A.
    - B (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B.
    - C (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C.
    - D (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç D.

    Returns:
    - Tuple[float, float]: –†–∞–≤–Ω–æ–≤–µ—Å–Ω–∞—è —Ü–µ–Ω–∞ –∏ –æ–±—ä–µ–º.
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    if A + D == 0:
        raise ZeroDivisionError(
            "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Ä–∞–≤–µ–Ω –Ω—É–ª—é.")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—É—é —Ü–µ–Ω—É (P*) –∏ –æ–±—ä–µ–º (Q*)
    price = (C + B) / (A + D)
    value = A * price - B

    return price, value


def get_coefficient_D_market_equilibrium(
    message, A, B, C
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ D –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - A (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A.
    - B (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B.
    - C (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C.

    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return

            D = float(message.text)

            if D < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                )
                bot.register_next_step_handler(
                    message,
                    get_coefficient_D_market_equilibrium,
                    A,
                    B,
                    C,
                )
                return

            try:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—É—é —Ü–µ–Ω—É (P*) –∏ –æ–±—ä–µ–º (Q*)
                price, value = calculate_market_equilibrium(
                    A, B, C, D)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                """
                –ü–æ—Å—á–∏—Ç–∞–ª, —á—Ç–æ –ª–æ–≥–∏—á–Ω–µ–µ –±—É–¥–µ—Ç –æ–∫—Ä—É–≥–ª–∏—Ç—å –æ–±—ä—ë–º –¥–æ —Ü–µ–ª—ã—Ö, –∞ 
                —Ü–µ–Ω—É –¥–æ —Å–æ—Ç—ã—Ö.
                """
                response = f"–†—ã–Ω–æ—á–Ω–æ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ:\n–¶–µ–Ω–∞ (P*): "\
                f"{round(price, 2)}\n–û–±—ä–µ–º (Q*): {round(value)}"
                bot.send_message(message.chat.id, response)

            except ZeroDivisionError as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
                handle_back_button(message)
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message,
                get_coefficient_D_market_equilibrium,
                A,
                B,
                C,
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            get_coefficient_D_market_equilibrium,
            A,
            B,
            C,
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞"
@bot.message_handler(
    func=lambda message: message.text == "–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞",
    content_types=["text"],
)
def handle_deficit_or_surplus_calculation_start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞".

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None
    """
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ReplyKeyboardRemove
    remove_keyboard = types.ReplyKeyboardRemove()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_keyboard = types.ReplyKeyboardMarkup(
        row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
    back_keyboard.add(back_button)

    bot.send_message(
        message.chat.id,
        "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"\
        " —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: Qd = A*P - B. Qs = C - D*P.",
        reply_markup=back_keyboard,
    )
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A:")
    bot.register_next_step_handler(message, get_coefficient_A_deficit_surplus)


def get_coefficient_A_deficit_surplus(message):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ A1 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return

            A1 = float(message.text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if A1 < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                )
                bot.register_next_step_handler(
                    message, get_coefficient_A_deficit_surplus
                )
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B:")
            bot.register_next_step_handler(
                message, get_coefficient_B_deficit_surplus, A1
            )
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message, get_coefficient_A_deficit_surplus)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message, get_coefficient_A_deficit_surplus)


def get_coefficient_B_deficit_surplus(message, A1):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ B1 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - A1 (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A1.

    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return

            B1 = float(message.text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if B1 < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                )
                bot.register_next_step_handler(
                    message, get_coefficient_B_deficit_surplus, A1
                )
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C:")
            bot.register_next_step_handler(
                message,
                get_coefficient_C_deficit_surplus,
                A1,
                B1)
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message, get_coefficient_B_deficit_surplus, A1
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message, get_coefficient_B_deficit_surplus, A1
        )


def get_coefficient_C_deficit_surplus(message, A1, B1):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ C1 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - A1 (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A1.
    - B1 (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B1.

    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return

            C1 = float(message.text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if C1 < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                )
                bot.register_next_step_handler(
                    message,
                    get_coefficient_C_deficit_surplus,
                    A1,
                    B1,
                )
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç D:")
            bot.register_next_step_handler(
                message,
                get_coefficient_D_deficit_surplus,
                A1,
                B1,
                C1,
            )
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message,
                get_coefficient_C_deficit_surplus,
                A1,
                B1)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            get_coefficient_C_deficit_surplus,
            A1,
            B1)


def get_coefficient_D_deficit_surplus(
    message, A1, B1, C1
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ D1 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - A1 (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A1.
    - B1 (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B1.
    - C1 (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C1.

    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return

            D1 = float(message.text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if D1 < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                )
                bot.register_next_step_handler(
                    message,
                    get_coefficient_D_deficit_surplus,
                    A1,
                    B1,
                    C1,
                )
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã (E):")
            bot.register_next_step_handler(
                message,
                get_price_level_deficit_surplus,
                A1,
                B1,
                C1,
                D1,
            )
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message,
                get_coefficient_D_deficit_surplus,
                A1,
                B1,
                C1,
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            get_coefficient_D_deficit_surplus,
            A1,
            B1,
            C1,
        )


def get_price_level_deficit_surplus(
    message, A1, B1, C1, D1
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - A1 (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A1.
    - B1 (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B1.
    - C1 (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C1.
    - D1 (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç D1.
    
    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return

            price_level = float(message.text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if price_level < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"\
                    " –¥–ª—è —É—Ä–æ–≤–Ω—è —Ü–µ–Ω—ã (E).",
                )
                bot.register_next_step_handler(
                    message,
                    get_price_level_deficit_surplus,
                    A1,
                    B1,
                    C1,
                    D1,
                )
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            demand = A1 * price_level - B1
            supply = C1 - D1 * price_level

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞
            deficit_or_surplus = demand - supply

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ
            if deficit_or_surplus > 0:
                situation = "–¥–µ—Ñ–∏—Ü–∏—Ç–∞"
            elif deficit_or_surplus < 0:
                situation = "–∏–∑–ª–∏—à–∫–∞"
            else:
                situation = "—Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            response = f"–ü—Ä–∏ —É—Ä–æ–≤–Ω–µ —Ü–µ–Ω—ã –≤ {price_level} –¥–µ–Ω–µ–∂–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö"\
            f" –Ω–∞ —Ä—ã–Ω–∫–µ –±—É–¥–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—è {situation}. –†–∞–∑–º–µ—Ä –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞"\
            f" —Å–æ—Å—Ç–∞–≤–∏—Ç: {round(abs(deficit_or_surplus), 2)} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞"\
            f" (–ø—Ä–∏ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞)"
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message,
                get_price_level_deficit_surplus,
                A1,
                B1,
                C1,
                D1,
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            get_price_level_deficit_surplus,
            A1,
            B1,
            C1,
            D1,
        )


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–¥–µ—Ä–∂–µ–∫
costs = {"–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ": [], "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ": []}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ—Ä–∂–µ–∫
MAX_COSTS = 5


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã"
@bot.message_handler(func=lambda message: message.text ==
                     "–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã", content_types=["text"])
def handle_profit_calculation_start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã".

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        None
    """
    if message is not None:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ReplyKeyboardRemove
        remove_keyboard = types.ReplyKeyboardRemove()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        back_keyboard = types.ReplyKeyboardMarkup(
            row_width=1, resize_keyboard=True)
        back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
        back_keyboard.add(back_button)

        if message.text == "–ù–∞–∑–∞–¥":
            handle_back_button(message)
            return
        bot.send_message(
            message.chat.id,
            "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:",
            reply_markup=back_keyboard,
        )
        bot.send_message(
            message.chat.id,
            "1. –û–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤ —à—Ç—É–∫–∞—Ö (Q):")
        bot.register_next_step_handler(message, get_firm_production_volume)


def get_firm_production_volume(message):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        None
    """
    try:
        if message is not None and message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return

            Q = int(message.text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if Q < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"\
                    " –¥–ª—è –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.",
                )
                bot.register_next_step_handler(
                    message, get_firm_production_volume)
                return

            bot.send_message(message.chat.id,
                             "2. –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ (P) –≤ —Ä—É–±–ª—è—Ö:")
            bot.register_next_step_handler(message, get_unit_price, Q)
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, 
                get_firm_production_volume)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–º–∞"\
            " –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.",
        )
        bot.register_next_step_handler(message, get_firm_production_volume)


def get_unit_price(message, Q):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - Q (int): –û–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.
    
    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return
            """
            –ü–æ—Å—á–∏—Ç–∞–ª –ª–æ–≥–∏—á–Ω—ã–º —Å–¥–µ–ª–∞—Ç—å —Ü–µ–Ω—É –∑–∞ 1 —à—Ç—É–∫—É —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∏–ø–∞
            float 
            """
            P = float(message.text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if P < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"\
                    " –¥–ª—è —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.",
                )
                bot.register_next_step_handler(message, get_unit_price, Q)
                return

            bot.send_message(
                message.chat.id,
                f"3. –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏ (FC) –≤ —Ä—É–±–ª—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,"\
                f" –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ"\
                f" –∏–∑–¥–µ—Ä–∂–∫–∏, —Ä–∞–∑–º–µ—Ä –∏–∑–¥–µ—Ä–∂–∫–∏'. (–≤–≤–µ–¥–∏—Ç–µ"\
                f" '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º {MAX_COSTS} –∏–∑–¥–µ—Ä–∂–µ–∫):",
            )
            bot.register_next_step_handler(message, get_fixed_costs, Q, P)
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_unit_price)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã –∑–∞"\
            " –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.",
        )
        bot.register_next_step_handler(message, get_unit_price, Q)


def get_fixed_costs(message, Q, P):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - Q (int): –û–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.
    - P (float): –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.
    
    Returns:
        None
    """
    if message.text is not None:
        if message.text == "–ù–∞–∑–∞–¥":
            handle_back_button(message)
            return
        if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
            bot.send_message(
                message.chat.id,
                f"4. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏ (VC) –≤ —Ä—É–±–ª—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,"\
                f" –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ—Ä–∂–∫–∏, —Ä–∞–∑–º–µ—Ä"\
                f" –∏–∑–¥–µ—Ä–∂–∫–∏'.  (–≤–≤–µ–¥–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'"\
                f" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º {MAX_COSTS} –∏–∑–¥–µ—Ä–∂–µ–∫):",
            )
            bot.register_next_step_handler(message, get_variable_costs, Q, P)
        else:
            handle_costs_input(message, Q, P, "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ")
    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_fixed_costs)


def get_variable_costs(message, Q, P):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - Q (int): –û–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.
    - P (float): –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.
    
    Returns:
        None
    """
    if message.text is not None:
        if message.text == "–ù–∞–∑–∞–¥":
            handle_back_button(message)
            return
        if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
            calculate_and_send_response(message, Q, P)
        else:
            handle_costs_input(message, Q, P, "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_variable_costs)


def handle_costs_input(message, Q, P, cost_type):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–∑–¥–µ—Ä–∂–µ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - Q (int): –û–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.
    - P (float): –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.
    - cost_type (str): –¢–∏–ø –∏–∑–¥–µ—Ä–∂–µ–∫ ('–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ' –∏–ª–∏ '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ').
    
    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return
            """
            –õ–æ–≥–∏—á–Ω–µ–µ –±—Ä–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å —Ç–∏–ø–æ–º float –¥–ª—è "–∏–∑–¥–µ—Ä–∂–µ–∫"  
            """
            input_costs = message.text.split(", ")
            name, cost = input_costs[0], float(input_costs[1])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if cost < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ"\
                    " –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–¥–µ—Ä–∂–µ–∫.",
                )
                bot.register_next_step_handler(
                    message, handle_costs_input, Q, P, cost_type
                )
                return

            if len(costs[cost_type]) < MAX_COSTS:
                costs[cost_type].append((name, cost))
                bot.send_message(
                    message.chat.id,
                    f"–î–æ–±–∞–≤–ª–µ–Ω—ã {cost_type} –∏–∑–¥–µ—Ä–∂–∫–∏: {name}, {cost}."\
                    f" –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'.",
                )#–ù–ï –í–ú–ï–©–ê–ï–¢–°–Ø –í <79 –°–ò–ú–í–û–õ–û–í. –ù–ï –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨!!!
                bot.register_next_step_handler(
                    message, get_fixed_costs, Q, P
                )if cost_type == "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ" else bot.register_next_step_handler(
                    message, get_variable_costs, Q, P
                )
            else:
                bot.send_message(
                    message.chat.id,
                    f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {cost_type}"\
                    f" –∏–∑–¥–µ—Ä–∂–µ–∫ ({MAX_COSTS}). –í–≤–µ–¥–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
                )#–ù–ï –í–ú–ï–©–ê–ï–¢–°–Ø –í <79 –°–ò–ú–í–û–õ–û–í. –ù–ï –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨!!!
                bot.register_next_step_handler(
                    message, get_fixed_costs, Q, P
                )if cost_type == "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ" else bot.register_next_step_handler(
                    message, get_variable_costs, Q, P
                )
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, handle_costs_input)
    except (ValueError, IndexError):
        bot.send_message(
            message.chat.id,
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ"\
            " '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ—Ä–∂–∫–∏, —Ä–∞–∑–º–µ—Ä –∏–∑–¥–µ—Ä–∂–∫–∏'.",
        )
        bot.register_next_step_handler(
            message, get_fixed_costs, Q, P
        ) if cost_type == "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ" else bot.register_next_step_handler(
            message, get_variable_costs, Q, P
        )


def calculate_and_send_response(message, Q, P):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å —Ñ–∏—Ä–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - Q (int): –û–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.
    - P (float): –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.
    
    Returns:
        None
    """
    try:
        # –°—É–º–º–∏—Ä—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏
        total_fixed_costs = sum(item[1] for item in costs["–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ"])

        # –°—É–º–º–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏
        total_variable_costs = sum(item[1] for item in costs["–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"])

        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫
        fixed_costs_sources = ", ".join(
            [f"{source[0]}, "\
            f"{source[1]} —Ä—É–±." for source in costs["–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ"]]
        )

        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫
        variable_costs_sources = ", ".join(
            [
                f"{source[0]} ({source[1]} —Ä—É–±./–µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞)"
                for source in costs["–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"]
            ]
        )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
        profit = Q * (P - total_variable_costs) - total_fixed_costs

        response = (
            f"–ü—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ {Q} –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ {P} —Ä—É–±. –∑–∞ –µ–¥–∏–Ω–∏—Ü—É"\
            " —Ç–æ–≤–∞—Ä–∞ –∏ —É—Ä–æ–≤–Ω–µ "
            f"–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –≤ {total_variable_costs} —Ä—É–±./–µ–¥–∏–Ω–∏—Ü—É"\
            " —Ç–æ–≤–∞—Ä–∞ "
            f"(–≤–∫–ª—é—á–∞—è: {variable_costs_sources}), "
            f"–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –≤ {total_fixed_costs} —Ä—É–±. "
            f"(–≤–∫–ª—é—á–∞—è: {fixed_costs_sources}), –ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏—Ç:"\
            f" {round(profit, 2)} —Ä—É–±.")

        bot.send_message(message.chat.id, response)

        costs["–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"].clear()
        costs["–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ"].clear()

    except Exception as e:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–∏–±—ã–ª–∏."\
            " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        )
        print(e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text.lower() == "–Ω–∞–∑–∞–¥")
def handle_back_button(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥". –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Ä–µ—à–∞–µ–º–æ–π –∑–∞–¥–∞—á–∏.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        None
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button1 = types.KeyboardButton("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–π –ö–ü–í")
    button2 = types.KeyboardButton("–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è")
    button3 = types.KeyboardButton("–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞")
    button4 = types.KeyboardButton("–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã")

    keyboard.add(button1, button2, button3, button4)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
     reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–π –ö–ü–í"
@bot.message_handler(func=lambda message: message.text ==
                     "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–π –ö–ü–í")
def handle_build_kpv(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–π –ö–ü–í". 
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è
    –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä–∏–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        None
    """
    remove_keyboard = types.ReplyKeyboardRemove()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_keyboard = types.ReplyKeyboardMarkup(
        row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
    back_keyboard.add(back_button)

    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ê –¥–ª—è"\
        " –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1:",
        reply_markup=back_keyboard,
    )
    bot.register_next_step_handler(message, get_max_production_A1)


def get_max_production_A1(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ê
     –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return
            max_production_A1 = float(message.text)
            while max_production_A1 < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ"\
                    " –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"\
                    " —Ç–æ–≤–∞—Ä–∞ –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1:",
                )
                bot.register_next_step_handler(message, get_max_production_A1)
                return

            bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"\
                " —Ç–æ–≤–∞—Ä–∞ –ë –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1:",
            )
            bot.register_next_step_handler(
                message, get_max_production_B1, max_production_A1
            )
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_max_production_A1)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_max_production_A1)


def get_max_production_B1(message, max_production_A1):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     –ë –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - max_production_A1 (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
     —Ç–æ–≤–∞—Ä–∞ –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1.
    
    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return
            max_production_B1 = float(message.text)
            while max_production_B1 < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ"\
                    " –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"\
                    " —Ç–æ–≤–∞—Ä–∞ –ë –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1:",
                )
                bot.register_next_step_handler(
                    message, get_max_production_B1, max_production_A1
                )
                return

            bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"\
                " –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2:",
            )
            bot.register_next_step_handler(
                message,
                get_max_production_A2,
                max_production_A1,
                max_production_B1)
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message, get_max_production_B1, max_production_A1
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message, get_max_production_B1, max_production_A1
        )


def get_max_production_A2(message, max_production_A1, max_production_B1):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ê –¥–ª—è 
    –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - max_production_A1 (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ 
    —Ç–æ–≤–∞—Ä–∞ –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1.
    - max_production_B1 (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ 
    —Ç–æ–≤–∞—Ä–∞ –ë –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1.
    
    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return
            max_production_A2 = float(message.text)
            while max_production_A2 < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"\
                    " –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"\
                    " –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2:",
                )
                bot.register_next_step_handler(
                    message,
                    get_max_production_A2,
                    max_production_A1,
                    max_production_B1)
                return

            bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ë"\
                " –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2:",
            )
            bot.register_next_step_handler(
                message,
                get_max_production_B2,
                max_production_A1,
                max_production_B1,
                max_production_A2,
            )
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message,
                get_max_production_A2,
                max_production_A1,
                max_production_B1)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            get_max_production_A2,
            max_production_A1,
            max_production_B1)


def get_max_production_B2(
    message, max_production_A1, max_production_B1, max_production_A2
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ë –¥–ª—è 
    –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2.

    Args:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - max_production_A1 (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1.
    - max_production_B1 (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     –ë –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1.
    - max_production_A2 (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ 
    –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2.
    
    Returns:
        None
    """
    try:
        if message.text is not None:
            if message.text == "–ù–∞–∑–∞–¥":
                handle_back_button(message)
                return
            max_production_B2 = float(message.text)
            while max_production_B2 < 0:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ"\
                    " –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"\
                    " —Ç–æ–≤–∞—Ä–∞ –ë –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2:",
                )
                bot.register_next_step_handler(
                    message,
                    get_max_production_B2,
                    max_production_A1,
                    max_production_B1,
                    max_production_A2,
                )
                return

            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—â–µ–π –ö–ü–í
            plot_kpv(
                max_production_A1,
                max_production_B1,
                max_production_A2,
                max_production_B2,
            )

            bot.send_photo(message.chat.id, open("kpv_plot.png", "rb"))
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(
                message,
                get_max_production_B2,
                max_production_A1,
                max_production_B1,
                max_production_A2,
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            get_max_production_B2,
            max_production_A1,
            max_production_B1,
            max_production_A2,
        )


def plot_kpv(
        max_production_A_1,
        max_production_B_1,
        max_production_A_2,
        max_production_B_2):
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –¥–≤—É—Ö
     –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ—á–µ–∫ A1, B1 –∏ C1.

    Parameters:
    - max_production_A_1 (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     A1 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1.
    - max_production_B_1 (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     B1 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1.
    - max_production_A_2 (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     A1 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2.
    - max_production_B_2 (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     B1 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
     –µ–≥–æ –≤ —Ñ–∞–π–ª 'kpv_plot.png'.
    
    Returns:
        None
    """

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ç–æ—á–µ–∫ A, B –∏ C
    point_a = [max_production_A_1 + max_production_A_2, 0]
    point_b = [
        max(max_production_A_1, max_production_A_2),
        max(max_production_B_1, max_production_B_2),
    ]
    point_c = [0, max_production_B_1 + max_production_B_2]

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–µ–∫
    a_x, a_y = point_a
    b_x, b_y = point_b
    c_x, c_y = point_c

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —Ç–æ—á–∫–∞–º–∏
    plt.figure(figsize=(8, 6))
    plt.scatter([a_y, b_y, c_y], [a_x, b_x, c_x], color="red", label="–¢–æ—á–∫–∏")

    # –ü—Ä–æ–≤–æ–¥–∏–º –æ—Ç—Ä–µ–∑–∫–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫–∏
    plt.plot([a_y, b_y], [a_x, b_x], color="blue",
             linestyle="--", label="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å 1")
    plt.plot([b_y, c_y], [b_x, c_x], color="green",
             linestyle="--", label="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å 2")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ—á–µ–∫
    plt.text(a_y, a_x, "A", fontsize=12, ha="right", va="bottom")
    plt.text(b_y, b_x, "B", fontsize=12, ha="left", va="top")
    plt.text(c_y, c_x, "C", fontsize=12, ha="right", va="top")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.title("–û–±—â–∞—è –ö–ü–í")
    plt.xlabel("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ë")
    plt.ylabel("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ A")
    plt.legend()
    plt.grid(True, linestyle="--", alpha=0.7)
    plt.savefig("kpv_plot.png")
    plt.close()


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True)

import telebot
from telebot import types
import matplotlib.pyplot as plt
import numpy as np
from telebot.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
bot = telebot.TeleBot('–¢–û–ö–ï–ù_–ë–û–¢–ê_–¢–£–¢')
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã 
@bot.message_handler(commands=['start', 'help'])
def handle_start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—áü§ì. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏‚Äº‚ùóÔ∏è")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    

    button1 = types.KeyboardButton("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–π –ö–ü–í")
                
    button2 = types.KeyboardButton("–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è")

    button3=types.KeyboardButton("–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞")
    
    button4=types.KeyboardButton("–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã")
    
    keyboard.add(button1,button2,button3,button4)
    
    # –∫–ª–∞–≤–∞
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)



@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        photo = open('f.jpg', 'rb')
        bot.send_photo(message.chat.id, photo)
        photo.close()
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–π –ö–ü–í"
@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–π –ö–ü–í")
def handle_build_kpv(message):
    
    remove_keyboard = types.ReplyKeyboardRemove()



    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    back_keyboard.add(back_button)


    

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1:", reply_markup=back_keyboard)
    bot.register_next_step_handler(message, get_max_production_A1)


def get_max_production_A1(message):
    try:
        if message.text is not None:
            if message.text =='–ù–∞–∑–∞–¥':
                handle_back_button(message) 
                return
            max_production_A1 = float(message.text)
            while max_production_A1 < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1:")
                bot.register_next_step_handler(message, get_max_production_A1)
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ë –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1:")
            bot.register_next_step_handler(message, get_max_production_B1, max_production_A1)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_max_production_A1)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_max_production_A1)

def get_max_production_B1(message, max_production_A1):
    try:
        if message.text is not None:
            if message.text =='–ù–∞–∑–∞–¥':
                handle_back_button(message) 
                return
            max_production_B1 = float(message.text)
            while max_production_B1 < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ë –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 1:")
                bot.register_next_step_handler(message, get_max_production_B1, max_production_A1)
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2:")
            bot.register_next_step_handler(message, get_max_production_A2, max_production_A1, max_production_B1)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_max_production_B1, max_production_A1)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_max_production_B1, max_production_A1)

def get_max_production_A2(message, max_production_A1, max_production_B1):
    try:
        if message.text is not None:
            if message.text =='–ù–∞–∑–∞–¥':
                handle_back_button(message) 
                return
            max_production_A2 = float(message.text)
            while max_production_A2 < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ê –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2:")
                bot.register_next_step_handler(message, get_max_production_A2, max_production_A1, max_production_B1)
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ë –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2:")
            bot.register_next_step_handler(message, get_max_production_B2, max_production_A1, max_production_B1, max_production_A2)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_max_production_A2, max_production_A1, max_production_B1)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_max_production_A2, max_production_A1, max_production_B1)

def get_max_production_B2(message, max_production_A1, max_production_B1, max_production_A2):
    try:
        if message.text is not None:
            if message.text =='–ù–∞–∑–∞–¥':
                handle_back_button(message) 
                return
            max_production_B2 = float(message.text)
            while max_production_B2 < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ë –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è 2:")
                bot.register_next_step_handler(message, get_max_production_B2, max_production_A1, max_production_B1, max_production_A2)
                return

            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—â–µ–π –ö–ü–í
            plot_kpv(max_production_A1, max_production_B1, max_production_A2, max_production_B2)

            
            bot.send_photo(message.chat.id, open('kpv_plot.png', 'rb'))
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_max_production_B2, max_production_A1, max_production_B1, max_production_A2)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_max_production_B2, max_production_A1, max_production_B1, max_production_A2)

def plot_kpv(max_production_A1, max_production_B1, max_production_A2, max_production_B2):
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    production_A1_values = np.linspace(0, max_production_A1, 100)
    production_A2_values = np.linspace(0, max_production_A2, 100)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—â–µ–π –ö–ü–í
    kpv_values = np.minimum(np.minimum(production_A1_values, max_production_B1), np.minimum(production_A2_values, max_production_B2))

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    plt.plot(production_A1_values, kpv_values, label='–ö–ü–í')
    plt.xlabel('–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ê –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–º 1')
    plt.ylabel('–û–±—â–∞—è –ö–ü–í')
    plt.legend()
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –ö–ü–í')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª
    plt.savefig('kpv_plot.png')
























# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è"
@bot.message_handler(func=lambda message: message.text == "–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è", content_types=['text'])
def handle_market_equilibrium_start(message):
    
    remove_keyboard = types.ReplyKeyboardRemove()



    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    back_keyboard.add(back_button)


    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A:", reply_markup=back_keyboard)
    bot.register_next_step_handler(message, get_coefficient_A_market_equilibrium)

def get_coefficient_A_market_equilibrium(message):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            coefficient_A = float(message.text)
            
            
            if coefficient_A < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                bot.register_next_step_handler(message, get_coefficient_A_market_equilibrium)
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B:")
            bot.register_next_step_handler(message, get_coefficient_B_market_equilibrium, coefficient_A)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_coefficient_A_market_equilibrium)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_coefficient_A_market_equilibrium)

def get_coefficient_B_market_equilibrium(message, coefficient_A):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            coefficient_B = float(message.text)

            
            if coefficient_B < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                bot.register_next_step_handler(message, get_coefficient_B_market_equilibrium, coefficient_A)
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C:")
            bot.register_next_step_handler(message, get_coefficient_C_market_equilibrium, coefficient_A, coefficient_B)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_coefficient_B_market_equilibrium, coefficient_A)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_coefficient_B_market_equilibrium, coefficient_A)


def get_coefficient_C_market_equilibrium(message, coefficient_A, coefficient_B):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            coefficient_C = float(message.text)

            
            if coefficient_C < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                bot.register_next_step_handler(message, get_coefficient_C_market_equilibrium, coefficient_A, coefficient_B)
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç D:")
            bot.register_next_step_handler(message, get_coefficient_D_market_equilibrium, coefficient_A, coefficient_B, coefficient_C)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_coefficient_C_market_equilibrium, coefficient_A, coefficient_B)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_coefficient_C_market_equilibrium, coefficient_A, coefficient_B)

def get_coefficient_D_market_equilibrium(message, coefficient_A, coefficient_B, coefficient_C):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            coefficient_D = float(message.text)

            
            if coefficient_D < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                bot.register_next_step_handler(message, get_coefficient_D_market_equilibrium, coefficient_A, coefficient_B, coefficient_C)
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—É—é —Ü–µ–Ω—É (P*) –∏ –æ–±—ä–µ–º (Q*)
            equilibrium_price, equilibrium_quantity = calculate_market_equilibrium(coefficient_A, coefficient_B, coefficient_C, coefficient_D)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            response = f"–†—ã–Ω–æ—á–Ω–æ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ:\n–¶–µ–Ω–∞ (P*): {equilibrium_price}\n–û–±—ä–µ–º (Q*): {equilibrium_quantity}"
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_coefficient_D_market_equilibrium, coefficient_A, coefficient_B, coefficient_C)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_coefficient_D_market_equilibrium, coefficient_A, coefficient_B, coefficient_C)

def calculate_market_equilibrium(A, B, C, D):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    if A + D == 0:
        raise ZeroDivisionError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Ä–∞–≤–µ–Ω –Ω—É–ª—é.")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—É—é —Ü–µ–Ω—É (P*) –∏ –æ–±—ä–µ–º (Q*)
    equilibrium_price = (C + B) / (A + D)
    equilibrium_quantity = A * equilibrium_price - B

    return equilibrium_price, equilibrium_quantity

def get_coefficient_D_market_equilibrium(message, coefficient_A, coefficient_B, coefficient_C):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            coefficient_D = float(message.text)

            
            if coefficient_D < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                bot.register_next_step_handler(message, get_coefficient_D_market_equilibrium, coefficient_A, coefficient_B, coefficient_C)
                return

            try:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—É—é —Ü–µ–Ω—É (P*) –∏ –æ–±—ä–µ–º (Q*)
                equilibrium_price, equilibrium_quantity = calculate_market_equilibrium(coefficient_A, coefficient_B, coefficient_C, coefficient_D)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                response = f"–†—ã–Ω–æ—á–Ω–æ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ:\n–¶–µ–Ω–∞ (P*): {equilibrium_price}\n–û–±—ä–µ–º (Q*): {equilibrium_quantity}"
                bot.send_message(message.chat.id, response)

            except ZeroDivisionError as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
                handle_back_button(message)

        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_coefficient_D_market_equilibrium, coefficient_A, coefficient_B, coefficient_C)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_coefficient_D_market_equilibrium, coefficient_A, coefficient_B, coefficient_C)














# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞"
@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞", content_types=['text'])
def handle_deficit_or_surplus_calculation_start(message):

    remove_keyboard = types.ReplyKeyboardRemove()



    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    back_keyboard.add(back_button)

    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: Qd = A*P - B. Qs =C - D*P.",reply_markup=back_keyboard)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A:")
    bot.register_next_step_handler(message, get_coefficient_A_deficit_surplus)

def get_coefficient_A_deficit_surplus(message):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            coefficient_A = float(message.text)

            
            if coefficient_A < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                bot.register_next_step_handler(message, get_coefficient_A_deficit_surplus)
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B:")
            bot.register_next_step_handler(message, get_coefficient_B_deficit_surplus, coefficient_A)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_coefficient_A_deficit_surplus)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_coefficient_A_deficit_surplus)

def get_coefficient_B_deficit_surplus(message, coefficient_A):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            coefficient_B = float(message.text)

            
            if coefficient_B < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                bot.register_next_step_handler(message, get_coefficient_B_deficit_surplus, coefficient_A)
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C:")
            bot.register_next_step_handler(message, get_coefficient_C_deficit_surplus, coefficient_A, coefficient_B)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_coefficient_B_deficit_surplus, coefficient_A)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_coefficient_B_deficit_surplus, coefficient_A)

def get_coefficient_C_deficit_surplus(message, coefficient_A, coefficient_B):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            coefficient_C = float(message.text)

            
            if coefficient_C < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                bot.register_next_step_handler(message, get_coefficient_C_deficit_surplus, coefficient_A, coefficient_B)
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç D:")
            bot.register_next_step_handler(message, get_coefficient_D_deficit_surplus, coefficient_A, coefficient_B, coefficient_C)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_coefficient_C_deficit_surplus, coefficient_A, coefficient_B)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_coefficient_C_deficit_surplus, coefficient_A, coefficient_B)

def get_coefficient_D_deficit_surplus(message, coefficient_A, coefficient_B, coefficient_C):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            coefficient_D = float(message.text)

            
            if coefficient_D < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                bot.register_next_step_handler(message, get_coefficient_D_deficit_surplus, coefficient_A, coefficient_B, coefficient_C)
                return

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã (E):")
            bot.register_next_step_handler(message, get_price_level_deficit_surplus, coefficient_A, coefficient_B, coefficient_C, coefficient_D)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_coefficient_D_deficit_surplus, coefficient_A, coefficient_B, coefficient_C)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_coefficient_D_deficit_surplus, coefficient_A, coefficient_B, coefficient_C)


def get_price_level_deficit_surplus(message, coefficient_A, coefficient_B, coefficient_C, coefficient_D):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            price_level = float(message.text)

            
            if price_level < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è —Ü–µ–Ω—ã (E).")
                bot.register_next_step_handler(message, get_price_level_deficit_surplus, coefficient_A, coefficient_B, coefficient_C, coefficient_D)
                return

            
            demand = coefficient_A * price_level - coefficient_B
            supply = coefficient_C - coefficient_D * price_level

            
            deficit_or_surplus = demand - supply

            
            if deficit_or_surplus > 0:
                situation = "–¥–µ—Ñ–∏—Ü–∏—Ç–∞"
            elif deficit_or_surplus < 0:
                situation = "–∏–∑–ª–∏—à–∫–∞"
            else:
                situation = "—Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            response = f"–ü—Ä–∏ —É—Ä–æ–≤–Ω–µ —Ü–µ–Ω—ã –≤ {price_level} –¥–µ–Ω–µ–∂–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –Ω–∞ —Ä—ã–Ω–∫–µ –±—É–¥–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—è {situation}. –†–∞–∑–º–µ—Ä –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç: {abs(deficit_or_surplus)} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–∏ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞)"
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_price_level_deficit_surplus, coefficient_A, coefficient_B, coefficient_C, coefficient_D)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_price_level_deficit_surplus, coefficient_A, coefficient_B, coefficient_C, coefficient_D)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–¥–µ—Ä–∂–µ–∫
costs = {
    'variable': [],
    'fixed': []
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ—Ä–∂–µ–∫
MAX_COSTS = 5

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã"
@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã", content_types=['text'])
def handle_profit_calculation_start(message):
    if message is not None:
       
        remove_keyboard = types.ReplyKeyboardRemove()



        back_keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
        back_keyboard.add(back_button)

        if message.text =='–ù–∞–∑–∞–¥':
            handle_back_button(message) 
            return
        bot.send_message(message.chat.id, "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:",reply_markup=back_keyboard)
        bot.send_message(message.chat.id, "1. –û–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤ —à—Ç—É–∫–∞—Ö (Q):")
        bot.register_next_step_handler(message, get_firm_production_volume)

def get_firm_production_volume(message):
    try:
        if message is not None and message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message) 
                return

            Q = float(message.text)

            
            if Q < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.")
                bot.register_next_step_handler(message, get_firm_production_volume)
                return

            bot.send_message(message.chat.id, "2. –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ (P) –≤ —Ä—É–±–ª—è—Ö:")
            bot.register_next_step_handler(message, get_unit_price, Q)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_firm_production_volume)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.")
        bot.register_next_step_handler(message, get_firm_production_volume)


def get_unit_price(message, Q):
    try:
        if message.text is not None:
            if message.text =='–ù–∞–∑–∞–¥':
                handle_back_button(message) 
                return
            P = float(message.text)

            
            if P < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.")
                bot.register_next_step_handler(message, get_unit_price, Q)
                return

            bot.send_message(message.chat.id, f"3. –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏ (FC) –≤ —Ä—É–±–ª—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ—Ä–∂–∫–∏, —Ä–∞–∑–º–µ—Ä –∏–∑–¥–µ—Ä–∂–∫–∏'. (–≤–≤–µ–¥–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º {MAX_COSTS} –∏–∑–¥–µ—Ä–∂–µ–∫):")
            bot.register_next_step_handler(message, get_fixed_costs, Q, P)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, get_unit_price)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.")
        bot.register_next_step_handler(message, get_unit_price, Q)

def get_fixed_costs(message, Q, P):
    if message.text is not None:
        if message.text =='–ù–∞–∑–∞–¥':
            handle_back_button(message) 
            return
        if message.text.lower() == '–≥–æ—Ç–æ–≤–æ':
            bot.send_message(message.chat.id, f"4. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏ (VC) –≤ —Ä—É–±–ª—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ—Ä–∂–∫–∏, —Ä–∞–∑–º–µ—Ä –∏–∑–¥–µ—Ä–∂–∫–∏'.  (–≤–≤–µ–¥–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º {MAX_COSTS} –∏–∑–¥–µ—Ä–∂–µ–∫):")
            bot.register_next_step_handler(message, get_variable_costs, Q, P)
        else:
            handle_costs_input(message, Q, P, 'fixed')
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_fixed_costs)
def get_variable_costs(message, Q, P):
    if message.text is not None:
        if message.text =='–ù–∞–∑–∞–¥':
            handle_back_button(message) 
            return
        if message.text.lower() == '–≥–æ—Ç–æ–≤–æ':
            calculate_and_send_response(message, Q, P)
        else:
            handle_costs_input(message, Q, P, 'variable')
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_variable_costs)
def handle_costs_input(message, Q, P, cost_type):
    try:
        if message.text is not None:
            if message.text == '–ù–∞–∑–∞–¥':
                handle_back_button(message)
                return

            input_costs = message.text.split(', ')
            name, cost = input_costs[0], float(input_costs[1])

            
            if cost < 0:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–¥–µ—Ä–∂–µ–∫.")
                bot.register_next_step_handler(message, handle_costs_input, Q, P, cost_type)
                return

            if len(costs[cost_type]) < MAX_COSTS:
                costs[cost_type].append((name, cost))
                bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω—ã {cost_type} –∏–∑–¥–µ—Ä–∂–∫–∏: {name}, {cost}. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'.")
                bot.register_next_step_handler(message, get_fixed_costs, Q, P) if cost_type == 'fixed' else bot.register_next_step_handler(message, get_variable_costs, Q, P)
            else:
                bot.send_message(message.chat.id, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {cost_type} –∏–∑–¥–µ—Ä–∂–µ–∫ ({MAX_COSTS}). –í–≤–µ–¥–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
                bot.register_next_step_handler(message, get_fixed_costs, Q, P) if cost_type == 'fixed' else bot.register_next_step_handler(message, get_variable_costs, Q, P)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, handle_costs_input)
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ—Ä–∂–∫–∏, —Ä–∞–∑–º–µ—Ä –∏–∑–¥–µ—Ä–∂–∫–∏'.")
        bot.register_next_step_handler(message, get_fixed_costs, Q, P) if cost_type == 'fixed' else bot.register_next_step_handler(message, get_variable_costs, Q, P)
def calculate_and_send_response(message, Q, P):
    try:
        # –°—É–º–º–∏—Ä—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏
        total_fixed_costs = sum(item[1] for item in costs['fixed'])

        # –°—É–º–º–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏
        total_variable_costs = sum(item[1] for item in costs['variable'])

        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫
        fixed_costs_sources = ', '.join([f'{source[0]}, {source[1]} —Ä—É–±.' for source in costs['fixed']])

        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫
        variable_costs_sources = ', '.join([f'{source[0]} ({source[1]} —Ä—É–±./–µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞)' for source in costs['variable']])

       
        profit = Q * (P - total_variable_costs) - total_fixed_costs

        response = (
            f"–ü—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ {Q} –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ {P} —Ä—É–±. –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –∏ —É—Ä–æ–≤–Ω–µ "
            f"–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –≤ {total_variable_costs} —Ä—É–±./–µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ "
            f"(–≤–∫–ª—é—á–∞—è: {variable_costs_sources}), "
            f"–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –≤ {total_fixed_costs} —Ä—É–±. "
            f"(–≤–∫–ª—é—á–∞—è: {fixed_costs_sources}), –ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏—Ç: {profit} —Ä—É–±."
        )

        bot.send_message(message.chat.id, response)
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–∏–±—ã–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        print(e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text.lower() == '–Ω–∞–∑–∞–¥')
def handle_back_button(message):
    
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button1 = types.KeyboardButton("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–π –ö–ü–í")
    button2 = types.KeyboardButton("–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è")
    button3 = types.KeyboardButton("–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞")
    button4 = types.KeyboardButton("–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã")
    
    keyboard.add(button1, button2, button3, button4)
    
   
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True)
